import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { PURGE } from 'redux-persist';
import { authLogin, authResetPassword } from './thunks';
import { AuthState } from '../../../utils/types';
import { setAuthInfo } from '../../actions';
import { Role } from '../../../utils/role';

const initialState: AuthState = {
  accountId: '',
  token: '',
  refreshToken: '',
  oamRole: Role.OAM_ROLE_USER,
};

export const auth = createSlice({
  name: 'auth',
  initialState,
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(setAuthInfo, (state, action: PayloadAction<AuthState>) => {
        state.token = action.payload.token;
        state.accountId = action.payload.accountId;
        state.oamRole = action.payload.oamRole;
        state.hasRedirect = action.payload.hasRedirect;
        state.redirectUrl = action.payload.redirectUrl;
      })
      .addCase(authLogin.pending, (state) => {
        // state.status = 'loading';
      })
      .addCase(authLogin.fulfilled, (state, action) => {
        // state.status = 'idle';
      })
      .addCase(authResetPassword.fulfilled, (state, action) => {
        console.log('authResetPassword', { state, action });
      })
      .addCase(
        PURGE,
        (state) => initialState, // Reset the state
      );
  },
});

export default auth.reducer;
