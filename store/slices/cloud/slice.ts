import { createSlice, isAnyOf } from '@reduxjs/toolkit';
import { cloudApi } from '../../services';

const initialState = {
  version: '',
  one_drive: {
    email: '',
  },
  google_drive: {
    email: '',
  },
  google_classroom: {
    email: '',
  },
};

export const cloud = createSlice({
  name: 'cloud',
  initialState,
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addMatcher(cloudApi.endpoints.userCloud.matchFulfilled, (state, action) => {
        state.one_drive.email = action.payload.data[0].email;
        state.google_drive.email = action.payload.data[1].email;
        state.google_classroom.email = action.payload.data[2].email;
      })
      .addMatcher(
        isAnyOf(
          cloudApi.endpoints.unpairGoogleDrive.matchFulfilled,
          cloudApi.endpoints.unpairGoogleClassroom.matchFulfilled,
          cloudApi.endpoints.unpairOneDrive.matchFulfilled,
        ),
        (state, action) => {
          console.log('unpair', { state, action });
          switch (action.meta.arg.endpointName) {
            case 'unpairGoogleDrive': {
              state.google_drive.email = '';
              state.google_classroom.email = '';
              break;
            }
            case 'unpairGoogleClassroom': {
              state.google_drive.email = '';
              state.google_classroom.email = '';
              break;
            }
            case 'unpairOneDrive': {
              state.one_drive.email = '';
              break;
            }
          }
        },
      );
  },
});

// Action creators are generated for each case reducer function
// export const { } = auth.actions;

export default cloud.reducer;
