import { createSlice, createEntityAdapter, EntityState } from '@reduxjs/toolkit';
import type { PayloadAction } from '@reduxjs/toolkit';
import { DeviceInfo, ExchangeTokenResponse, DeleteDeviceRequest } from '../../../utils/types';
import { deviceApi } from '../../services';
import { deleteDevices, refreshToken } from '../../actions';

const devicesAdapter = createEntityAdapter<DeviceInfo>({
  selectId: (d) => d.id,
});

const initialState: ExchangeTokenResponse['data']['data'] & {
  devices: EntityState<DeviceInfo>;
  maxPageIndex: number;
  totalCount: number;
} = {
  token: '',
  isCompletedAccountInfo: false,
  omsRoleId: 0,
  oamRoleId: 0,
  omsId: '',
  licenseInfo: { displayName: '', description: '', expiresAt: '' },
  devices: devicesAdapter.getInitialState({}),
  maxPageIndex: 0,
  totalCount: 0,
};

export const devices = createSlice({
  name: 'devices',
  initialState,
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(refreshToken, (state, action: PayloadAction<ExchangeTokenResponse>) => {
        if (action.payload?.data.data) {
          console.log('extraReducers refreshToken');
          const {
            token,
            isCompletedAccountInfo,
            omsRoleId,
            oamRoleId,
            licenseInfo, //: { displayName, description, expiresAt },
            omsId,
          } = action.payload.data.data;
          state.token = token;
          state.isCompletedAccountInfo = isCompletedAccountInfo;
          state.omsRoleId = omsRoleId;
          state.oamRoleId = oamRoleId;
          state.licenseInfo = licenseInfo;
          state.omsId = omsId;
        }
      })
      .addCase(deleteDevices, (state, action: PayloadAction<DeleteDeviceRequest['deviceIds']>) => {
        state.devices = devicesAdapter.removeMany(state.devices, action.payload);
      })
      .addMatcher(deviceApi.endpoints.exchangeToken.matchFulfilled, (state, action) => {
        // if errorInfo, data = null
        if (action.payload?.data.data) {
          const {
            token,
            isCompletedAccountInfo,
            omsRoleId,
            oamRoleId,
            licenseInfo, //: { displayName, description, expiresAt },
            omsId,
          } = action.payload.data.data;
          state.token = token;
          state.isCompletedAccountInfo = isCompletedAccountInfo;
          state.omsRoleId = omsRoleId;
          state.oamRoleId = oamRoleId;
          state.licenseInfo = licenseInfo;
          state.omsId = omsId;
        }
      })
      .addMatcher(deviceApi.endpoints.getDevices.matchFulfilled, (state, action) => {
        const { payload } = action;
        if (payload && 'data' in payload && payload.data?.data) {
          devicesAdapter.removeAll(state.devices);
          devicesAdapter.upsertMany(state.devices, payload.data.data);
          state.maxPageIndex = payload.data.maxPageIndex;
          state.totalCount = payload.data.totalCount;
        }
      });
  },
});

// Action creators are generated for each case reducer function
// export const {} = users.actions;

export default devices.reducer;
