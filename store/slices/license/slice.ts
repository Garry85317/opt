import { createSlice } from '@reduxjs/toolkit';
import { licenseApi } from '../../services';
import { OMSInfoResponse, OSSInfoResponse } from '../../../utils/types';

const initialState: {
  oms: OMSInfoResponse['data'];
  oss: OSSInfoResponse['data'];
} = {
  oms: {
    plan: '',
    planDesc: '',
    role: '',
    organizationName: '',
    autoRenew: false,
    users: {
      admin: 0,
      power: 0,
      user: 0,
    },
    userLimit: -1,
    deviceLimit: -1,
    storage: {
      app: 0,
      autoFocus: 0,
      broadcast: 0,
      osd: 0,
      playlist: 0,
      usage: 0,
      limit: '-1',
    },
    expiryDate: '',
    expiryUTCDate: '',
    startDate: '',
    startUTCDate: '',
    isActive: false,
  },
  oss: {
    plan: '',
    planDesc: '',
    role: '',
    createSessionLimit: 0,
    attendeeCount: 0,
    attendeeLimit: -1,
    credit: 0,
    storageLimit: '-1',
    expiryDate: '',
    expiryUTCDate: '',
    startDate: '',
    startUTCDate: '',
  },
};

export const license = createSlice({
  name: 'license',
  initialState,
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addMatcher(licenseApi.endpoints.omsInfo.matchFulfilled, (state, action) => {
        state.oms = action.payload.data;
      })
      .addMatcher(licenseApi.endpoints.ossInfo.matchFulfilled, (state, action) => {
        state.oss = action.payload.data;
      });
  },
});

// Action creators are generated for each case reducer function
// export const { } = auth.actions;

export default license.reducer;
