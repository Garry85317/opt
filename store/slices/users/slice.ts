import { createEntityAdapter, createSlice } from '@reduxjs/toolkit';
import { IUsers } from '../../../utils/types';
import { userApi } from '../../services';

const usersAdapter = createEntityAdapter<IUsers>({
  // sortComparer: (a, b) => a.id.localeCompare(b.id, undefined, { numeric: true }),
});

const initialState = usersAdapter.getInitialState({});
/*{
  id: 0,
  accountId: '',
  name: '',
  email: '',
  // password: string;
  // language: string;
  // age: string;
  // avatar: string;
  // timezone: string;
  oamRole: '',
  omsRole: '',
  ossRole: '',
  nfc01: '',
  nfc02: '',
  // note: string;
  // organizationName: string;
  // isGuardianUser: boolean;
  // guardianEmail: string;
  emailConfirm: false,
  // confirmCode: string;
  // provider: string;
  // loginAt: string;
  // refreshAt: string;
  createdDatetime: '',
  updatedDatetime: '',
  }*/

export const users = createSlice({
  name: 'users',
  initialState: {
    count: 0,
    omsUsersCount: 1,
    ossUsersCount: 0,
    users: initialState,
  },
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addMatcher(userApi.endpoints.getOrganizationUsers.matchFulfilled, (state, action) => {
        usersAdapter.removeAll(state.users);
        usersAdapter.upsertMany(state.users, action.payload.data.data);
        state.count = action.payload.data.count;
        if (action.payload.data.omsUsersCount !== undefined) {
          state.omsUsersCount = action.payload.data.omsUsersCount;
        }
        if (action.payload.data.ossUsersCount !== undefined) {
          state.ossUsersCount = action.payload.data.ossUsersCount;
        }
      })
      .addMatcher(userApi.endpoints.getOrganizationUserCount.matchFulfilled, (state, action) => {
        state.count = action.payload.data.count;
        if (action.payload.data.omsUsersCount !== undefined) {
          state.omsUsersCount = action.payload.data.omsUsersCount;
        }
        if (action.payload.data.ossUsersCount !== undefined) {
          state.ossUsersCount = action.payload.data.ossUsersCount;
        }
      });
  },
});

// Action creators are generated for each case reducer function
// export const {} = users.actions;

export default users.reducer;
